# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EficEnerg
                                 A QGIS plugin
 efic energ
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-23
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Miquel Rodriguez
        email                : miquel.rodriguezj@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 
"""


import datetime
import os
import os.path
import time

import processing
import psycopg2
import qgis.utils
from PyQt5.QtCore import *
from PyQt5.QtCore import QSizeF
from PyQt5.QtGui import *
from PyQt5.QtGui import QColor
from PyQt5.QtSql import *
from PyQt5.QtWidgets import (QAction, QApplication, QColorDialog, QMessageBox,
                             QToolBar)
from qgis.core import (QgsCategorizedSymbolRenderer, QgsDataSourceUri,
                       QgsDiagramLayerSettings, QgsDiagramSettings,
                       QgsFillSymbol, QgsField, QgsFeature, QgsGraduatedSymbolRenderer,
                       QgsLayerTreeLayer, QgsPalLayerSettings, QgsPieDiagram,
                       QgsProcessing, QgsProject, QgsProperty,
                       QgsPropertyCollection, QgsRasterLayer,
                       QgsRendererCategory, QgsRendererRange,
                       QgsSimpleFillSymbolLayer, QgsSimpleLineSymbolLayer,
                       QgsSingleCategoryDiagramRenderer, QgsSymbol,
                       QgsTextBackgroundSettings, QgsTextFormat, QgsUnitTypes,
                       QgsVectorLayer, QgsVectorLayerSimpleLabeling,
                       QgsWkbTypes)
from qgis.core import NULL
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QMessageBox
from qgis.utils import iface

# Import the code for the dialog
from .eficiencia_energetica_dialog import EficEnergDialog
# Initialize Qt resources from file resources.py
from .resources import *

'''Variables globals'''
Versio_modul = "V_Q3.250402"
nomBD1 = ""
password1 = ""
host1 = ""
port1 = ""
user1 = ""
cur = None
conn = None
progress = None
textBox = ""
uri = None
numOperacions = 0
numEntitats = 0
fitxer = ""
connexioFeta = False
color = QColor(0,0,0)
minimumValue = 0
maximumValue = 0
estandar = True
personalitzat = False
consum = False
emissions = False
consumElectric = False
consumGas = False
any = 0

versioBD = ""

habitatges = "cert_efi_energ_edif_mataro_geom"
habitatgesLayer = None
entitat = None
nomEntitat = ""
entitatLayer = None
entitatLayerJoined = None
entitatLayerResumNumHabit = None
entitatLayerResumm2 = None
entitatLayerResumMitjana = None
entitatLayerResumModa = None
entitatLayerResumMediana = None

results = {}
parameters = {}

joinEntitatHabitatges = None

llistaEntitats = [
    None, # Entitat per defecte, ha de donar error
    f"parcel_temp_{fitxer}",
    f"zone_{fitxer}",
    "seccions",
    "barris",
    "districtes_postals",
    "districtes"
]

colors = {
    'colorConsum': QColor("#000000"),
    'colorEmissions': QColor("#000000"),
    'colorA': QColor.fromCmykF(0.85, 0.15, 0.95, 0.30),
    'colorB': QColor.fromCmykF(0.80, 0.00, 1.00, 0.00),
    'colorC': QColor.fromCmykF(0.45, 0.00, 1.00, 0.00),
    'colorD': QColor.fromCmykF(0.10, 0.00, 0.95, 0.00),
    'colorE': QColor.fromCmykF(0.05, 0.30, 1.00, 0.00),
    'colorF': QColor.fromCmykF(0.10, 0.65, 1.00, 0.00),
    'colorG': QColor.fromCmykF(0.05, 0.95, 0.95, 0.00)
}

symbols = {
    'symbolConsum': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolEmissions': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolA': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolB': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolC': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolD': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolE': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolF': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolG': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString))
}

ranges = {
    'rangeA': QgsRendererRange(0.0, 34.1, symbols['symbolA'], 'A'),
    'rangeB': QgsRendererRange(34.1, 55.5, symbols['symbolB'], 'B'),
    'rangeC': QgsRendererRange(55.5, 85.4, symbols['symbolC'], 'C'),
    'rangeD': QgsRendererRange(85.4, 111.6, symbols['symbolD'], 'D'),
    'rangeE': QgsRendererRange(111.6, 136.6, symbols['symbolE'], 'E'),
    'rangeF': QgsRendererRange(136.6, 170.7, symbols['symbolF'], 'F'),
    'rangeG': QgsRendererRange(170.7, 9999999, symbols['symbolG'], 'G')
}

'''
ranges_consum = {
    'units': QgsRendererRange(-1.0, -0.1, symbols['symbolConsum'], 'Consum (KWh/m²any)'),
    'rangeA': QgsRendererRange(0.0, 34.1, symbols['symbolA'], 'A'),
    'rangeB': QgsRendererRange(34.1, 55.5, symbols['symbolB'], 'B'),
    'rangeC': QgsRendererRange(55.5, 85.4, symbols['symbolC'], 'C'),
    'rangeD': QgsRendererRange(85.4, 111.6, symbols['symbolD'], 'D'),
    'rangeE': QgsRendererRange(111.6, 136.6, symbols['symbolE'], 'E'),
    'rangeF': QgsRendererRange(136.6, 170.7, symbols['symbolF'], 'F'),
    'rangeG': QgsRendererRange(170.7, 9999999, symbols['symbolG'], 'G')
}

ranges_emissions = {
    'units': QgsRendererRange(-1.0, -0.1, symbols['symbolEmissions'], 'Emissions (kgCO₂/m²any)'),
    'rangeA': QgsRendererRange(0.0, 34.1, symbols['symbolA'], 'A'),
    'rangeB': QgsRendererRange(34.1, 55.5, symbols['symbolB'], 'B'),
    'rangeC': QgsRendererRange(55.5, 85.4, symbols['symbolC'], 'C'),
    'rangeD': QgsRendererRange(85.4, 111.6, symbols['symbolD'], 'D'),
    'rangeE': QgsRendererRange(111.6, 136.6, symbols['symbolE'], 'E'),
    'rangeF': QgsRendererRange(136.6, 170.7, symbols['symbolF'], 'F'),
    'rangeG': QgsRendererRange(170.7, 9999999, symbols['symbolG'], 'G')
}
'''

llistaAnysElectric = [
    '2016',
    '2017',
    '2018',
    '2019',
    '2020'
]

llistaAnysGas = [
    '2016',
    '2017',
    '2018',
    '2019',
    '2020',
    '2021',
    '2022'
]

class EficEnerg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EficEnerg_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog and keep reference

        self.dlg = EficEnergDialog()
        
        self.dlg.pushSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.pushInici.clicked.connect(self.on_click_Inici)
        self.dlg.comboBD.currentIndexChanged.connect(self.on_change_ComboConn)
        self.dlg.comboEntitat.currentIndexChanged.connect(self.on_change_comboEntitat)
        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_checkNumHabit_checkm2)
        self.dlg.checkm2.stateChanged.connect(self.on_change_checkNumHabit_checkm2)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_checkMitjana)
        self.dlg.checkModa.stateChanged.connect(self.on_change_checkModa)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_checkMediana)
        self.dlg.pushColorP.clicked.connect(self.on_click_color)
        self.dlg.tabPersonalitzacio.currentChanged.connect(self.on_currentChanged_tabPersonalitzacio)

        self.dlg.consumButton.toggled.connect(self.on_change_consum)
        self.dlg.emissionsButton.toggled.connect(self.on_change_emissions)

        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkm2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkModa.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_entitatsIOperacions)

        self.dlg.consumElectricButton.toggled.connect(self.on_change_consumElectric)
        self.dlg.consumGasButton.toggled.connect(self.on_change_consumGas)

        self.dlg.checkNumHabit_2.stateChanged.connect(self.on_change_checkNumHabit_checkm2_2)
        self.dlg.checkm2_2.stateChanged.connect(self.on_change_checkNumHabit_checkm2_2)
        self.dlg.checkMitjana_2.stateChanged.connect(self.on_change_checkMitjana_2)
        self.dlg.checkModa_2.stateChanged.connect(self.on_change_checkModa_2)
        self.dlg.checkMediana_2.stateChanged.connect(self.on_change_checkMediana_2)

        self.dlg.checkNumHabit_2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkm2_2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMitjana_2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkModa_2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMediana_2.stateChanged.connect(self.on_change_entitatsIOperacions)

        self.dlg.tabCalculs.currentChanged.connect(self.on_currentChanged_tabCalculs)

        self.dlg.rejected.connect(self.on_click_Sortir)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CCU')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EficEnerg', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/eficiencia_energetica/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Eficiencia Energetica'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def on_change_ComboConn(self):
        global nomBD1
        global password1
        global host1
        global port1
        global user1
        global cur
        global conn
        global textBox
        global uri
        global connexioFeta
        s = QSettings()
        select = 'Selecciona connexió'
        nom_conn = self.dlg.comboBD.currentText()

        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()

            nomBD1 = s.value("database", "")
            password1 = s.value("password", "")
            host1 = s.value("host", "")
            port1 = s.value("port", "")
            user1 = s.value("username", "")
            #schema1 = s.value("schema", "")

            self.barraEstat_connectant()
            textBox += f"\nConnectant a la base de dades {nomBD1}...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()

            # Connexio
            nomBD = nomBD1.encode('ascii', 'ignore')
            user = user1.encode('ascii', 'ignore')
            server = host1.encode('ascii', 'ignore')
            password = password1.encode('ascii', 'ignore')
            #schema = schema1.encode('ascii', 'ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + user.decode("utf-8") +"' host='" + server.decode("utf-8") +"' password='" + password.decode("utf-8") + "'" # + "'schema='" + schema.decode("utf-8") + "'"
                conn = psycopg2.connect(estructura)
                self.barraEstat_connectat()
                connexioFeta = True
                textBox += f"\nConnectat a la base de dades {nomBD1}\n"
                textBox += "\nSelecciona l'entitat amb la que vulguis treballar i indica els càlculs que vols realitzar sobre aquesta així com si vols els càlculs sobre el consum o les emissions.\n"
                self.dlg.textEstat.setText(textBox)
                self.scroll_text()
                cur = conn.cursor()
                uri = QgsDataSourceUri()
                uri.setConnection(host1, port1, nomBD1, user1, password1)
                #schema1 = "public"
                self.detect_database_version()

                self.dlg.groupEntitats.setEnabled(True)
                self.dlg.comboEntitat.setEnabled(True)
                self.dlg.groupChecks.setEnabled(True)
                self.dlg.groupChecks_2.setEnabled(True)
                self.dlg.pushInici.setEnabled(True)

                self.dlg.groupEntitats.setVisible(True)
                self.dlg.comboEntitat.setVisible(True)
                self.dlg.groupChecks.setVisible(True)
                self.dlg.groupChecks_2.setVisible(True)

            except Exception as ex:
                self.estatInicial()
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error canvi connexió")
                if conn is not None:
                    conn.rollback()
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                return
            
            self.dlg.tabPersonalitzacio.setVisible(True)
            self.dlg.pushColor.setEnabled(False)
            self.dlg.pushColor.setStyleSheet("background-color: #707070")
            self.dlg.pushColor.setAutoFillBackground(True)
            self.dlg.minScale.setEnabled(False)
            self.dlg.maxScale.setEnabled(False)
             
        else:
            self.barraEstat_noConnectat()
    
    def detect_database_version(self):
        global cur
        global conn
        global textBox
        global versioBD

        sql_versio = "select taula from config where variable = 'versio';"
        cur.execute(sql_versio)
        versioBD = cur.fetchone()[0]

        if versioBD == '1.0':
            if textBox is not None or textBox != "":
                textBox += "\nVersió de la base de dades: 1.0\n"
                self.dlg.textEstat.setText(textBox)
                self.scroll_text()
            else:
                self.dlg.textEstat.setText("Versió de la base de dades: 1.0\n")
            
            try:
                sql = "SELECT taula FROM config WHERE variable = 'parceles';"
                cur.execute(sql)
                parcel_name = cur.fetchone()[0]
                sql = "SELECT taula FROM config WHERE variable = 'illes';"
                cur.execute(sql)
                illes_name = cur.fetchone()[0]
            except:
                print("Error al llegir la configuració de la base de dades")
                QMessageBox.information(None, "Error", "Error al llegir la configuració de la base de dades")
                return
            try:
                cur.execute(f"""
                            DROP TABLE IF EXISTS parcel_temp_{fitxer};
                            CREATE TABLE parcel_temp_{fitxer} (
                                id_parcel,
                                geom,
                                cadastral_reference
                            ) AS SELECT "id", "geom", "utm_total" FROM "{parcel_name}";
                            """)
                conn.commit()
                cur.execute(f"""
                            DROP TABLE IF EXISTS zone_{fitxer};
                            CREATE TABLE zone_{fitxer} (
                                id_zone,
                                geom,
                                cadastral_zoning_reference
                            ) AS SELECT "id", "geom", "D_S_I" FROM "{illes_name}";
                            """)
                conn.commit()
            except:
                print("Error al crear les taules temporals")
                QMessageBox.information(None, "Error", "Error al crear les taules temporals")
                return
        else:
            if textBox is not None or textBox != "":
                textBox += "\nVersió de la base de dades: 2.0\n"
                self.dlg.textEstat.setText(textBox)
                self.scroll_text()
            else:
                self.dlg.textEstat.setText("Versió de la base de dades: 2.0\n")
            try:
                sql = f"DROP TABLE IF EXISTS parcel_temp_{fitxer};\n"
                sql += f"CREATE TABLE parcel_temp_{fitxer} AS SELECT * FROM parcel;"
                cur.execute(sql)
                conn.commit()
            except:
                print("Error al crear la taula temporal")
                QMessageBox.information(None, "Error", "Error al crear la taula temporal")
                return
            if textBox is not None or textBox != "":
                textBox += "\nVersió de la base de dades: 2.0\n"
                self.dlg.textEstat.setText(textBox)
                self.scroll_text()
            else:
                self.dlg.textEstat.setText("Versió de la base de dades: 2.0\n")
            try:
                sql = f"DROP TABLE IF EXISTS zone_{fitxer};\n"
                sql += f"CREATE TABLE zone_{fitxer} AS SELECT * FROM zone WHERE type != 'POLIGONO';"
                cur.execute(sql)
                conn.commit()
            except:
                print("Error al crear la taula temporal")
                QMessageBox.information(None, "Error", "Error al crear la taula temporal")
                return

    def on_change_comboEntitat(self):
        global uri
        global schema1
        global entitat
        global entitatLayer
        global llistaEntitats
        global habitatges
        global habitatgesLayer
        global nomEntitat

        entitat = llistaEntitats[self.dlg.comboEntitat.currentIndex()]
        nomEntitat = self.dlg.comboEntitat.currentText()
        schema1 = "public"

        if self.dlg.tabCalculs.currentIndex() == 0:
            habitatges = "cert_efi_energ_edif_mataro_geom"
        if self.dlg.tabCalculs.currentIndex() == 1:
            if self.dlg.consumElectricButton.isChecked():
                habitatges = "consums_mataro_llum"
            if self.dlg.consumGasButton.isChecked():
                habitatges = "consums_mataro_gas"

        try:
            uri.setDataSource(schema1, entitat, 'geom')
            entitatLayer = QgsVectorLayer(uri.uri(), entitat, 'postgres')
        except Exception as ex:
            print ("Error no s'ha trobat entitat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error no s'ha trobat entitat")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        try:
            uri.setDataSource(schema1, habitatges, 'geom')
            habitatgesLayer = QgsVectorLayer(uri.uri(), habitatges, 'postgres')
        except Exception as ex:
            print ("Error no s'ha trobat entitat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error no s'ha trobat entitat")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        if entitat == llistaEntitats[1]:
            self.dlg.minScale.setValue(500)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(500)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[2]:
            self.dlg.minScale.setValue(4000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(4000)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[3]:
            self.dlg.minScale.setValue(10000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(10000)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]:
            self.dlg.minScale.setValue(40000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(40000)
            self.dlg.maxScaleP.setValue(1)
        
    def on_change_entitatsIOperacions(self):
        if numOperacions > 2:
            self.dlg.labelAvis.setVisible(True)
        else:
            self.dlg.labelAvis.setVisible(False)

    def on_change_checkNumHabit_checkm2(self):
        global numOperacions

        self.dlg.labelRestriccio.setFont(QFont("MS Shell Dlg 2", 7))

        if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Al calcular la Mitjana, la Moda i la Mediana no es tenen en compte les superfícies dels habitatges.")
        
        if not self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(False)
            self.dlg.checkMediana.setChecked(False)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Els càlculs de la Mitjana i la Moda estan ponderats per la superfície dels habitatges.")

        if self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("La Mitjana i la Moda utilitzen en els seus càlculs la superfície dels habitatges.")

        if not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(False)
            self.dlg.checkMitjana.setChecked(False)
            self.dlg.checkModa.setEnabled(False)
            self.dlg.checkModa.setChecked(False)
            self.dlg.checkMediana.setEnabled(False)
            self.dlg.checkMediana.setChecked(False)
            self.dlg.labelRestriccio.setVisible(False)
            self.dlg.labelRestriccio.setText(" ")

        if self.dlg.checkNumHabit.isChecked():
            numOperacions += 1
        if not self.dlg.checkNumHabit.isChecked():
            numOperacions -= 1
        
        if self.dlg.checkm2.isChecked():
            numOperacions += 1
        if not self.dlg.checkm2.isChecked():
            numOperacions -= 1
    
    def on_change_checkMitjana(self):
        global numOperacions
        if self.dlg.checkMitjana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkModa(self):
        global numOperacions
        if self.dlg.checkModa.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkMediana(self):
        global numOperacions
        if self.dlg.checkMediana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkNumHabit_checkm2_2(self):
        global numOperacions

        self.dlg.labelRestriccio.setFont(QFont("MS Shell Dlg 2", 7))

        if self.dlg.checkNumHabit_2.isChecked() and not self.dlg.checkm2_2.isChecked():
            self.dlg.checkMitjana_2.setEnabled(True)
            self.dlg.checkModa_2.setEnabled(True)
            self.dlg.checkMediana_2.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Al calcular la Mitjana, la Moda i la Mediana no es tenen en compte les superfícies dels habitatges.")

        if not self.dlg.checkNumHabit_2.isChecked() and self.dlg.checkm2_2.isChecked():
            self.dlg.checkMitjana_2.setEnabled(True)
            self.dlg.checkModa_2.setEnabled(True)
            self.dlg.checkMediana_2.setEnabled(False)
            self.dlg.checkMediana_2.setChecked(False)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Els càlculs de la Mitjana i la Moda estan ponderats per la superfície dels habitatges.")

        if self.dlg.checkNumHabit_2.isChecked() and self.dlg.checkm2_2.isChecked():
            self.dlg.checkMitjana_2.setEnabled(True)
            self.dlg.checkModa_2.setEnabled(True)
            self.dlg.checkMediana_2.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("La Mitjana i la Moda utilitzen en els seus càlculs la superfície dels habitatges.")

        if not self.dlg.checkNumHabit_2.isChecked() and not self.dlg.checkm2_2.isChecked():
            self.dlg.checkMitjana_2.setEnabled(False)
            self.dlg.checkMitjana_2.setChecked(False)
            self.dlg.checkModa_2.setEnabled(False)
            self.dlg.checkModa_2.setChecked(False)
            self.dlg.checkMediana_2.setEnabled(False)
            self.dlg.checkMediana_2.setChecked(False)
            self.dlg.labelRestriccio.setVisible(False)
            self.dlg.labelRestriccio.setText(" ")

        if self.dlg.checkNumHabit_2.isChecked():
            numOperacions += 1
        if not self.dlg.checkNumHabit_2.isChecked():
            numOperacions -= 1

    def on_change_checkMitjana_2(self):
        global numOperacions
        if self.dlg.checkMitjana_2.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkModa_2(self):
        global numOperacions
        if self.dlg.checkModa_2.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkMediana_2(self):
        global numOperacions
        if self.dlg.checkMediana_2.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_currentChanged_tabCalculs(self):
        global numOperacions
        numOperacions = 0
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        self.dlg.checkNumHabit_2.setChecked(False)
        self.dlg.checkm2_2.setChecked(False)
        self.dlg.checkMitjana_2.setChecked(False)
        self.dlg.checkModa_2.setChecked(False)
        self.dlg.checkMediana_2.setChecked(False)
        self.dlg.labelRestriccio.setVisible(False)
        self.dlg.labelRestriccio.setText(" ")            

    def on_click_color(self):
        global color
        try:
            aux = QColorDialog.getColor()
        except Exception as ex:
            print("Error al seleccionar color")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes copia")
            conn.rollback()
            return
        if aux.isValid():
            color = aux
        else:
            color = None
            pass
        if color != None:
            self.dlg.pushColorP.setStyleSheet("background-color: " + color.name())
            self.dlg.pushColorP.setAutoFillBackground(True)

    def on_currentChanged_tabPersonalitzacio(self):
        global estandar
        global personalitzat
        if self.dlg.tabPersonalitzacio.currentIndex() == 0:
            estandar = True
            personalitzat = False
        if self.dlg.tabPersonalitzacio.currentIndex() == 1:
            estandar = False
            personalitzat = True

    def on_change_consum(self):
        global consum
        global emissions
        global consumElectric
        global consumGas

        if self.dlg.consumButton.isChecked():
            consum = True
            emissions = False
        else:
            consum = False
            emissions = True

        self.dlg.consumElectricButton.setChecked(False)
        self.dlg.consumGasButton.setChecked(False)
        self.dlg.checkNumHabit_2.setChecked(False)
        self.dlg.checkm2_2.setChecked(False)
        self.dlg.checkMitjana_2.setChecked(False)
        self.dlg.checkModa_2.setChecked(False)
        self.dlg.checkMediana_2.setChecked(False)
        consumElectric = False
        consumGas = False

    def on_change_emissions(self):
        global consum
        global emissions
        global consumElectric
        global consumGas

        if self.dlg.emissionsButton.isChecked():
            emissions = True
            consum = False
        else:
            emissions = False
            consum = True

        self.dlg.consumElectricButton.setChecked(False)
        self.dlg.consumGasButton.setChecked(False)
        self.dlg.checkNumHabit_2.setChecked(False)
        self.dlg.checkm2_2.setChecked(False)
        self.dlg.checkMitjana_2.setChecked(False)
        self.dlg.checkModa_2.setChecked(False)
        self.dlg.checkMediana_2.setChecked(False)
        consumElectric = False
        consumGas = False

    def on_change_consumElectric(self):
        global consumElectric
        global consumGas
        global consum
        global emissions

        if self.dlg.consumElectricButton.isChecked():
            consumElectric = True
            consumGas = False
            self.dlg.comboAny.clear()
            self.dlg.comboAny.addItems(llistaAnysElectric)
            self.dlg.poderCalorLine.setEnabled(False)
        else:
            consumElectric = False
            consumGas = True
            self.dlg.comboAny.clear()
            self.dlg.comboAny.addItems(llistaAnysGas)
            self.dlg.poderCalorLine.setEnabled(True)
        
        self.dlg.consumButton.setChecked(False)
        self.dlg.emissionsButton.setChecked(False)
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        consum = False
        emissions = False


    def on_change_consumGas(self):
        global consumElectric
        global consumGas
        global consum
        global emissions

        if self.dlg.consumGasButton.isChecked():
            consumGas = True
            consumElectric = False
            self.dlg.comboAny.clear()
            self.dlg.comboAny.addItems(llistaAnysGas)
            self.dlg.poderCalorLine.setEnabled(True)
        else:
            consumGas = False
            consumElectric = True
            self.dlg.comboAny.clear()
            self.dlg.comboAny.addItems(llistaAnysElectric)
            self.dlg.poderCalorLine.setEnabled(False)
        self.dlg.consumButton.setChecked(False)
        self.dlg.emissionsButton.setChecked(False)
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        consum = False
        emissions = False

    def desagregarConsumsElectrics(self):
        global habitatgesLayer

        camps_origen = habitatgesLayer.fields()
        crs = habitatgesLayer.crs()

        nova_capa = QgsVectorLayer("Point?crs=" + crs.authid(), "consums desagregats", "memory")
        nova_capa.startEditing()
        nova_capa_data = nova_capa.dataProvider()

        nova_capa_data.addAttributes(camps_origen)
        nova_capa.updateFields()

        features = habitatgesLayer.getFeatures()
        for feature in features:
            consum = feature['consum']
            if consum is not None and consum != NULL:
                num_clientes = feature['NUM_CLIENTES_CIERRE']

                if num_clientes is not None and num_clientes != NULL:
                    if num_clientes > 0:
                        consum_per_client = consum / num_clientes

                        for _ in range(num_clientes):
                            nova_feature = QgsFeature(camps_origen)
                            nova_feature.setGeometry(feature.geometry())
                            for field in camps_origen.names():
                                if field == 'consum':
                                    nova_feature[field] = consum_per_client
                                else:
                                    nova_feature[field] = feature[field]
                            nova_capa.addFeature(nova_feature)

        nova_capa.commitChanges()
        nova_capa.updateExtents()

        habitatgesLayer = nova_capa



    def ompleCombos(self, combo, llista, predef, sort):
        combo.blockSignals(True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList=None
        for elem in llista:
            try:
                if isinstance(elem, tuple):
                    item = QStandardItem(str(elem[0]))
                else:
                    item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem[0].encode('utf-8')))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def getConnections(self):
        '''Aquesta funció retorna les connexions que estan guardades en el projecte.'''
        s = QSettings()
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections

    def estatInicial(self):
        global textBox
        global Versio_modul
        self.dlg.comboBD.setCurrentIndex(0)
        self.dlg.comboEntitat.setCurrentIndex(0)
        self.barraEstat_noConnectat()
        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(False)
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        self.dlg.checkNumHabit_2.setChecked(False)
        self.dlg.checkm2_2.setChecked(False)
        self.dlg.checkMitjana_2.setChecked(False)
        self.dlg.checkModa_2.setChecked(False)
        self.dlg.checkMediana_2.setChecked(False)
        self.dlg.poderCalorLine.setEnabled(False)
        self.dlg.textEstat.clear()
        self.dlg.versio.setText(Versio_modul)
        self.dlg.groupEntitats.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.pushInici.setEnabled(False)
        self.dlg.groupChecks.setVisible(False)
        self.dlg.groupChecks_2.setVisible(False)
        self.dlg.groupEntitats.setVisible(False)
        self.dlg.comboEntitat.setVisible(False)
        self.dlg.checkMitjana.setEnabled(False)
        self.dlg.checkModa.setEnabled(False)
        self.dlg.checkMediana.setEnabled(False)
        self.dlg.labelAvis.setVisible(False)
        self.dlg.progressBar.setValue(0)
        self.dlg.labelRestriccio.setVisible(False)
        self.dlg.tabPersonalitzacio.setVisible(False)
        self.dlg.pushColor.setEnabled(False)
        self.dlg.pushColor.setStyleSheet("background-color: #707070")
        self.dlg.pushColor.setAutoFillBackground(True)
        self.dlg.minScale.setEnabled(False)
        self.dlg.maxScale.setEnabled(False)
        self.dlg.pushColorP.setEnabled(True)
        self.dlg.pushColorP.setStyleSheet("background-color: #707070")
        self.dlg.pushColorP.setAutoFillBackground(True)
        self.dlg.minScaleP.setEnabled(True)
        self.dlg.maxScaleP.setEnabled(True)
        self.dlg.tabCalculs.setCurrentIndex(0)
        textBox = "Selecciona una base de dades...\n"
        self.dlg.textEstat.setText(textBox)
        self.dlg.setEnabled(True)
    
    def estatFinalitzat(self):
        global habitatges
        global habitatgesLayer
        global entitat
        global nomEntitat
        global entitatLayer
        global entitatLayerJoined
        global entitatLayerResumNumHabit
        global entitatLayerResumm2
        global entitatLayerResumMitjana
        global entitatLayerResumModa
        global entitatLayerResumMediana

        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.groupChecks_2.setEnabled(True)
        self.dlg.pushInici.setEnabled(True)
        self.dlg.pushSortir.setEnabled(True)
        self.dlg.labelAvis.setVisible(True)

        habitatges = "cert_efi_energ_edif_mataro_geom"
        habitatgesLayer = None
        entitat = None
        nomEntitat = ""
        entitatLayer = None
        entitatLayerJoined = None
        entitatLayerResumNumHabit = None
        entitatLayerResumm2 = None
        entitatLayerResumMitjana = None
        entitatLayerResumModa = None
        entitatLayerResumMediana = None

    def calculIdEntitat(self):
        global entitatLayer

        if entitat == llistaEntitats[1]:
            camp_id = "id_parcel"
        elif entitat == llistaEntitats[2]:
            camp_id = "id_zone"
        else:
            camp_id = "id"

        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'idEntitat',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 1,
            'FORMULA': f'{camp_id}',
            'INPUT': entitatLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        try:
            result = processing.run('qgis:fieldcalculator', alg_params)
            entitatLayer = result['OUTPUT']
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular idEntitat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular idEntitat")
            self.dlg.setEnabled(True)
            return
        
    def calculQualificacio(self):
        # Aquest mètode només serveix per al consum elèctric i de gas,
        # el consum d'energia primaria no renovable i les emissions de CO2 provenen d'una taula on tenim la qualificació donada
        global habitatgesLayer

        if consumGas:
            if not self.dlg.poderCalorLine.text() == "" and not self.dlg.poderCalorLine.text() == "0" and not self.dlg.poderCalorLine.text() == "0.0" and not self.dlg.poderCalorLine.text() == "0.00":
                if "," in self.dlg.poderCalorLine.text():
                    poderCalor = self.dlg.poderCalorLine.text().replace(",",".")
                else:
                    poderCalor = self.dlg.poderCalorLine.text()
            else:
                QMessageBox.critical(None, "Error", "Error al calcular consum de gas")
                self.dlg.setEnabled(True)
                return

        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'qualificacio',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 2,
            'FORMULA':  f'''
                        CASE
                            WHEN ("CONSUMO_{any}"/"metres_cadastre") < 34.1 THEN 'A'
                            WHEN ("CONSUMO_{any}"/"metres_cadastre") >= 34.1 AND ("CONSUMO_{any}"/"metres_cadastre") < 55.5 THEN 'B'
                            WHEN ("CONSUMO_{any}"/"metres_cadastre") >= 55.5 AND ("CONSUMO_{any}"/"metres_cadastre") < 85.4 THEN 'C'
                            WHEN ("CONSUMO_{any}"/"metres_cadastre") >= 85.4 AND ("CONSUMO_{any}"/"metres_cadastre") < 111.6 THEN 'D'
                            WHEN ("CONSUMO_{any}"/"metres_cadastre") >= 111.6 AND ("CONSUMO_{any}"/"metres_cadastre") < 136.6 THEN 'E'
                            WHEN ("CONSUMO_{any}"/"metres_cadastre") >= 136.6 AND ("CONSUMO_{any}"/"metres_cadastre") < 170.7 THEN 'F'
                            ELSE 'G'
                        END
                        ''',
            'INPUT': habitatgesLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }

        if consumGas:
            alg_params['FORMULA'] = f'''
                        CASE
                            WHEN ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") < 34.1 THEN 'A'
                            WHEN ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") >= 34.1 AND ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") < 55.5 THEN 'B'
                            WHEN ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") >= 55.5 AND ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") < 85.4 THEN 'C'
                            WHEN ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") >= 85.4 AND ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") < 111.6 THEN 'D'
                            WHEN ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") >= 111.6 AND ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") < 136.6 THEN 'E'
                            WHEN ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") >= 136.6 AND ("CONSUMO_{any}"*{poderCalor}/"metres_cadastre") < 170.7 THEN 'F'
                            ELSE 'G'
                        END
                        '''

        try:
            result = processing.run('qgis:fieldcalculator', alg_params)
            habitatgesLayer = result['OUTPUT']
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular qualificació")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular qualificació")
            self.dlg.setEnabled(True)
            return

    def castConsumEmissions(self):
        global habitatgesLayer
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': None,
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,
            'FORMULA': None,
            'INPUT': habitatgesLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        if consum:
            alg_params['FIELD_NAME'] = 'consum'
            alg_params['FORMULA'] = '\"energia primària no renovable\"'
        if emissions:
            alg_params['FIELD_NAME'] = 'emissions'
            alg_params['FORMULA'] = '\"emissions de co2\"'
        if consumElectric:
            alg_params['FIELD_NAME'] = 'consum'
            alg_params['FORMULA'] = f'\"CONSUMO_{any}\"/\"metres_cadastre\"'
        if consumGas:
            if not self.dlg.poderCalorLine.text() == "" and not self.dlg.poderCalorLine.text() == "0" and not self.dlg.poderCalorLine.text() == "0.0" and not self.dlg.poderCalorLine.text() == "0.00":
                if "," in self.dlg.poderCalorLine.text():
                    poderCalor = self.dlg.poderCalorLine.text().replace(",",".")
                else:
                    poderCalor = self.dlg.poderCalorLine.text()
                alg_params['FIELD_NAME'] = 'consum'
                alg_params['FORMULA'] = f'(\"CONSUMO_{any}\"*{poderCalor})/\"metres_cadastre\"'
            else:
                QMessageBox.critical(None, "Error", "Error al calcular consum de gas")
                self.dlg.setEnabled(True)
                return

        try:
            result = processing.run('qgis:fieldcalculator', alg_params)
            habitatgesLayer = result['OUTPUT']
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular consum o emissions")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular consum o emissions")
            self.dlg.setEnabled(True)
            return

    def castm2(self):
        global habitatgesLayer
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'm2',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,
            'FORMULA': '\"metres_cadastre\"',
            'INPUT': habitatgesLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        try:
            result = processing.run('qgis:fieldcalculator', alg_params)
            habitatgesLayer = result['OUTPUT']
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular m2")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular m2")
            self.dlg.setEnabled(True)
            return
    
    def joinEntitatHabitatges(self):
        global joinEntitatHabitatges
        global entitatLayer
        global habitatgesLayer
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'INPUT': entitatLayer,
            'JOIN': habitatgesLayer,
            'JOIN_FIELDS': None,
            'METHOD': 0,
            'PREDICATE': [0],
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        if consum and not self.dlg.checkm2.isChecked():
            alg_params['JOIN_FIELDS'] = ['id','referencia cadastral','qualificació de consum energia primaria no renovable','energia primària no renovable','consum']
        if emissions and not self.dlg.checkm2.isChecked():
            alg_params['JOIN_FIELDS'] = ['id','referencia cadastral','qualificacio emissions de co2','emissions de co2','emissions']
        if consum and self.dlg.checkm2.isChecked():
            alg_params['JOIN_FIELDS'] = ['id','referencia cadastral','qualificació de consum energia primaria no renovable','energia primària no renovable','consum','m2']
        if emissions and self.dlg.checkm2.isChecked():
            alg_params['JOIN_FIELDS'] = ['id','referencia cadastral','qualificacio emissions de co2','emissions de co2','emissions','m2']
        
        if (consumElectric or consumGas) and not self.dlg.checkm2_2.isChecked():
            alg_params['JOIN_FIELDS'] = ['id',f'CONSUMO_{any}','cadastral_reference','qualificacio','consum']
        if (consumElectric or consumGas) and self.dlg.checkm2_2.isChecked():
            alg_params['JOIN_FIELDS'] = ['id',f'CONSUMO_{any}','cadastral_reference','qualificacio','consum','m2']

        try:
            result = processing.run('native:joinattributesbylocation', alg_params)
            joinEntitatHabitatges = result['OUTPUT']
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al fer join entre entitat i habitatges")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al fer join entre entitat i habitatges")
            self.dlg.setEnabled(True)
            return
    
    def calculNumHabit(self):
        global results
        global entitatLayerResumNumHabit

        outputs = {}

        try:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    None,
                'INPUT': joinEntitatHabitatges,
                'VALUES_FIELD_NAME':        None,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if consum:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificació de consum energia primaria no renovable']
                alg_params['VALUES_FIELD_NAME'] = 'consum'
            if emissions:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificacio emissions de co2']
                alg_params['VALUES_FIELD_NAME'] = 'emissions'
            if consumElectric or consumGas:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificacio']
                alg_params['VALUES_FIELD_NAME'] = 'consum'
            outputs['Estadistiques'] = processing.run('qgis:statisticsbycategories', alg_params)

            alg_params = {
                'AGGREGATES': None,
                'GROUP_BY': '\"idEntitat\"',
                'INPUT': outputs['Estadistiques']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if consum:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'A\', \"count\", 0)','length': 0,'name': 'NumA','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'B\', \"count\", 0)','length': 0,'name': 'NumB','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'C\', \"count\", 0)','length': 0,'name': 'NumC','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'D\', \"count\", 0)','length': 0,'name': 'NumD','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'E\', \"count\", 0)','length': 0,'name': 'NumE','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'F\', \"count\", 0)','length': 0,'name': 'NumF','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'G\', \"count\", 0)','length': 0,'name': 'NumG','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}]
            if emissions:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'A\', \"count\", 0)','length': 0,'name': 'NumA','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'B\', \"count\", 0)','length': 0,'name': 'NumB','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'C\', \"count\", 0)','length': 0,'name': 'NumC','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'D\', \"count\", 0)','length': 0,'name': 'NumD','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'E\', \"count\", 0)','length': 0,'name': 'NumE','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'F\', \"count\", 0)','length': 0,'name': 'NumF','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'G\', \"count\", 0)','length': 0,'name': 'NumG','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}]
            if consumElectric or consumGas:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'A\', \"count\", 0)','length': 0,'name': 'NumA','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'B\', \"count\", 0)','length': 0,'name': 'NumB','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'C\', \"count\", 0)','length': 0,'name': 'NumC','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'D\', \"count\", 0)','length': 0,'name': 'NumD','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'E\', \"count\", 0)','length': 0,'name': 'NumE','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'F\', \"count\", 0)','length': 0,'name': 'NumF','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'G\', \"count\", 0)','length': 0,'name': 'NumG','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}]
            
            outputs['Aggregate'] = processing.run('qgis:aggregate', alg_params)

            alg_params = {
                'DISCARD_NONMATCHING': False,
                'FIELD': 'idEntitat',
                'FIELDS_TO_COPY': [''],
                'FIELD_2': 'idEntitat',
                'INPUT': entitatLayer,
                'INPUT_2': outputs['Aggregate']['OUTPUT'],
                'METHOD': 1,
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['JoinFinal'] = processing.run('native:joinattributestable', alg_params)

            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumA\"','length': 0,'name': 'NumA','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumB\"','length': 0,'name': 'NumB','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumC\"','length': 0,'name': 'NumC','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumD\"','length': 0,'name': 'NumD','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumE\"','length': 0,'name': 'NumE','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumF\"','length': 0,'name': 'NumF','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"NumG\"','length': 0,'name': 'NumG','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"TotalEE\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}], 
                'GROUP_BY' : '\"idEntitat\"', 
                'INPUT' : outputs['JoinFinal']['OUTPUT'], 
                'OUTPUT' : 'TEMPORARY_OUTPUT'
            }
            entitatLayerResumNumHabit = processing.run('qgis:aggregate', alg_params)['OUTPUT']
            QgsProject.instance().addMapLayer(entitatLayerResumNumHabit, False).setName("Classificació per nombre d'habitatges")
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular nombre d'habitatges per categoria de " + nomEntitat)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular nombre d'habitatges per categoria de " + nomEntitat)
            self.dlg.setEnabled(True)
            return

    def calculm2(self):
        global results
        global entitatLayerResumm2

        outputs = {}

        try:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    None,
                'INPUT': joinEntitatHabitatges,
                'VALUES_FIELD_NAME':        'm2',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if consum:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificació de consum energia primaria no renovable']
            if emissions:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificacio emissions de co2']
            if consumElectric or consumGas:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificacio']
            outputs['Estadistiques'] = processing.run('qgis:statisticsbycategories', alg_params)
            QgsProject.instance().addMapLayer(outputs['Estadistiques']['OUTPUT'], False).setName("Estadistiques")

            alg_params = {
                'AGGREGATES': None,
                'GROUP_BY': '\"idEntitat\"',
                'INPUT': outputs['Estadistiques']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if consum:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'A\', \"sum\", 0)','length': 0,'name': 'm2A','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'B\', \"sum\", 0)','length': 0,'name': 'm2B','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'C\', \"sum\", 0)','length': 0,'name': 'm2C','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'D\', \"sum\", 0)','length': 0,'name': 'm2D','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'E\', \"sum\", 0)','length': 0,'name': 'm2E','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'F\', \"sum\", 0)','length': 0,'name': 'm2F','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'G\', \"sum\", 0)','length': 0,'name': 'm2G','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': '\"sum\"','length': 0,'name': 'Totalm2','precision': 0,'type': 6}]
            if emissions:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'A\', \"sum\", 0)','length': 0,'name': 'm2A','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'B\', \"sum\", 0)','length': 0,'name': 'm2B','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'C\', \"sum\", 0)','length': 0,'name': 'm2C','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'D\', \"sum\", 0)','length': 0,'name': 'm2D','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'E\', \"sum\", 0)','length': 0,'name': 'm2E','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'F\', \"sum\", 0)','length': 0,'name': 'm2F','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'G\', \"sum\", 0)','length': 0,'name': 'm2G','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': '\"sum\"','length': 0,'name': 'Totalm2','precision': 0,'type': 6}]
            if consumElectric or consumGas:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'A\', \"sum\", 0)','length': 0,'name': 'm2A','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'B\', \"sum\", 0)','length': 0,'name': 'm2B','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'C\', \"sum\", 0)','length': 0,'name': 'm2C','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'D\', \"sum\", 0)','length': 0,'name': 'm2D','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'E\', \"sum\", 0)','length': 0,'name': 'm2E','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'F\', \"sum\", 0)','length': 0,'name': 'm2F','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio\" = \'G\', \"sum\", 0)','length': 0,'name': 'm2G','precision': 0,'type': 6},
                                            {'aggregate': 'sum','delimiter': ',','input': '\"sum\"','length': 0,'name': 'Totalm2','precision': 0,'type': 6}]
            outputs['Aggregatem2'] = processing.run('qgis:aggregate', alg_params)

            alg_params = {
                'DISCARD_NONMATCHING': False,
                'FIELD': 'idEntitat',
                'FIELDS_TO_COPY': [''],
                'FIELD_2': 'idEntitat',
                'INPUT': entitatLayer,
                'INPUT_2': outputs['Aggregatem2']['OUTPUT'],
                'METHOD': 1,
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['JoinFinal'] = processing.run('native:joinattributestable', alg_params)

            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2A\"','length': 0,'name': 'm2A','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2B\"','length': 0,'name': 'm2B','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2C\"','length': 0,'name': 'm2C','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2D\"','length': 0,'name': 'm2D','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2E\"','length': 0,'name': 'm2E','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2F\"','length': 0,'name': 'm2F','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"m2G\"','length': 0,'name': 'm2G','precision': 0,'type': 2},
                                {'aggregate': 'first_value','delimiter': ',','input': '\"Totalm2\"','length': 0,'name': 'Totalm2','precision': 0,'type': 2}], 
                'GROUP_BY' : '\"idEntitat\"', 
                'INPUT' : outputs['JoinFinal']['OUTPUT'], 
                'OUTPUT' : 'TEMPORARY_OUTPUT'
            }
            entitatLayerResumm2 = processing.run('qgis:aggregate', alg_params)['OUTPUT']
            QgsProject.instance().addMapLayer(entitatLayerResumm2, False).setName("Classificació per metres quadrats")
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular metres quadrats per categoria de " + nomEntitat)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular metres quadrats per categoria de " + nomEntitat)
            self.dlg.setEnabled(True)
            return

    def calculMitjana(self):
        global results
        global entitatLayerResumMitjana

        outputs = {}

        try:
            if (self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked()) or (self.dlg.checkNumHabit_2.isChecked() and not self.dlg.checkm2.isChecked()):
                ''' indexMITJANAhab '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME':    ['idEntitat'],
                    'INPUT': joinEntitatHabitatges,
                    'VALUES_FIELD_NAME':        None,
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['VALUES_FIELD_NAME'] = 'consum'
                if emissions:
                    alg_params['VALUES_FIELD_NAME'] = 'emissions'
                if consumElectric or consumGas:
                    alg_params['VALUES_FIELD_NAME'] = 'consum'
                outputs['Indexmitjana'] = processing.run('qgis:statisticsbycategories', alg_params)

                ''' Join Entitat - Mitjana '''
                alg_params = {
                    'DISCARD_NONMATCHING': False,
                    'FIELD': 'idEntitat',
                    'FIELDS_TO_COPY': [''],
                    'FIELD_2': 'idEntitat',
                    'INPUT': entitatLayer,
                    'INPUT_2': outputs['Indexmitjana']['OUTPUT'],
                    'METHOD': 1,
                    'PREFIX': '',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['JoinFinal'] = processing.run('native:joinattributestable', alg_params)

                ''' Clean Mitjana '''
                alg_params = {
                    'AGGREGATES': [{'aggregate': 'first_value', 'delimiter': ',', 'input': '\"idEntitat\"', 'length': 0, 'name': 'idEntitat', 'precision': 0, 'type': 10},
                                   {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"mean\"', 'length': 0, 'name': 'indexMITJANA', 'precision': 0, 'type': 6}],
                    'GROUP_BY': 'idEntitat',
                    'INPUT': outputs['JoinFinal']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                entitatLayerResumMitjana = processing.run('qgis:aggregate', alg_params)['OUTPUT']
                entitatLayerResumMitjana.setName('Mitjana')

            if self.dlg.checkm2.isChecked() or self.dlg.checkm2_2.isChecked():            
                ''' Producte consum / emissions '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'producte',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 0,
                    'FORMULA': None,
                    'INPUT': joinEntitatHabitatges,
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['FORMULA'] = '\"consum\" * \"m2\"'
                if emissions:
                    alg_params['FORMULA'] = '\"emissions\" * \"m2\"'
                if consumElectric or consumGas:
                    alg_params['FORMULA'] = '\"consum\" * \"m2\"'
                outputs['Producte'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' sum producte '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME':    None,
                    'INPUT': outputs['Producte']['OUTPUT'],
                    'VALUES_FIELD_NAME':        'producte',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificació de consum energia primaria no renovable']
                if emissions:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio emissions de co2']
                if consumElectric or consumGas:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio']
                outputs['SumProducte'] = processing.run('qgis:statisticsbycategories', alg_params)
                
                ''' sum m2 '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME':    None,
                    'INPUT': joinEntitatHabitatges,
                    'VALUES_FIELD_NAME':        'm2',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificació de consum energia primaria no renovable']
                if emissions:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio emissions de co2']
                if consumElectric or consumGas:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio']
                outputs['SumM2'] = processing.run('qgis:statisticsbycategories', alg_params)

                ''' Clean sum producte '''
                alg_params = {
                    'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
                    'INPUT': outputs['SumProducte']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['cleanproducte'] = processing.run('qgis:deletecolumn', alg_params)

                ''' Clean m2 '''
                alg_params = {
                    'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
                    'INPUT': outputs['SumM2']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['cleanm2'] = processing.run('qgis:deletecolumn', alg_params)

                ''' rename producte '''
                alg_params = {
                    'FIELD': 'sum',
                    'INPUT': outputs['cleanproducte']['OUTPUT'],
                    'NEW_NAME': 'sum_producte',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['renameproducte'] = processing.run('native:renametablefield', alg_params)

                ''' rename m2 '''
                alg_params = {
                    'FIELD': 'sum',
                    'INPUT': outputs['cleanm2']['OUTPUT'],
                    'NEW_NAME': 'sum_m2',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['renamem2'] = processing.run('native:renametablefield', alg_params)

                ''' id_qual per producte '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'id_qual',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 2,
                    'FORMULA': None,
                    'INPUT': outputs['renameproducte']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificació de consum energia primaria no renovable\")'
                if emissions:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio emissions de co2\")'
                if consumElectric or consumGas:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio\")'
                outputs['producte_fin'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' seccio_qual per m2 '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'id_qual',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 2,
                    'FORMULA': None,
                    'INPUT': outputs['renamem2']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificació de consum energia primaria no renovable\")'
                if emissions:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio emissions de co2\")'
                if consumElectric or consumGas:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio\")'
                outputs['m2_fin'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' Join 2 Aggregate '''
                alg_params = {
                    'DISCARD_NONMATCHING': False,
                    'FIELD': 'id_qual',
                    'FIELDS_TO_COPY': ['sum_m2'],
                    'FIELD_2': 'id_qual',
                    'INPUT': outputs['producte_fin']['OUTPUT'],
                    'INPUT_2': outputs['m2_fin']['OUTPUT'],
                    'METHOD': 1,
                    'PREFIX': '',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['Join2Aggregate'] = processing.run('native:joinattributestable', alg_params)

                ''' Sum de Sum Producte i Sum de Sum m2 '''
                alg_params = {
                    'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                    {'aggregate': 'sum','delimiter': ',','input': '\"sum_producte\"','length': 0,'name': 'sum_producte','precision': 0,'type': 6},
                                    {'aggregate': 'sum','delimiter': ',','input': '\"sum_m2\"','length': 0,'name': 'sum_m2','precision': 0,'type': 6}],
                    'GROUP_BY' : '\"idEntitat\"', 
                    'INPUT' : outputs['Join2Aggregate']['OUTPUT'], 
                    'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['SumDeSums'] = processing.run('qgis:aggregate', alg_params)

                ''' Mitjana '''

                alg_params = {
                    'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                    {'aggregate': 'first_value','delimiter': ',','input': '\"sum_producte\"/\"sum_m2\"','length': 0,'name': 'mitjana','precision': 0,'type': 6}],
                    'GROUP_BY' : '\"idEntitat\"', 
                    'INPUT' : outputs['SumDeSums']['OUTPUT'], 
                    'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['Mitjana'] = processing.run('qgis:aggregate', alg_params)

                ''' Join Final '''
                alg_params = {
                    'DISCARD_NONMATCHING': False,
                    'FIELD': 'idEntitat',
                    'FIELDS_TO_COPY': [''],
                    'FIELD_2': 'idEntitat',
                    'INPUT': entitatLayer,
                    'INPUT_2': outputs['Mitjana']['OUTPUT'],
                    'METHOD': 1,
                    'PREFIX': '',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['JoinFinal'] = processing.run('native:joinattributestable', alg_params)

                ''' Aggregate Final Clean '''
                alg_params = {
                    'AGGREGATES': [{'aggregate': 'first_value', 'delimiter': ',', 'input': '\"idEntitat\"', 'length': 0, 'name': 'idEntitat', 'precision': 0, 'type': 2},
                                   {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"mitjana\"', 'length': 0, 'name': 'indexMITJANA', 'precision': 0, 'type': 6}],
                    'GROUP_BY': 'idEntitat',
                    'INPUT': outputs['JoinFinal']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                entitatLayerResumMitjana = processing.run('qgis:aggregate', alg_params)['OUTPUT']
                entitatLayerResumMitjana.setName('Mitjana')
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular mitjana de " + nomEntitat)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular mitjana de " + nomEntitat)
            self.dlg.setEnabled(True)
            return

    def calculModa(self):
        global results
        global entitatLayerResumModa

        outputs = {}

        try:
            if (self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked()) or (self.dlg.checkNumHabit_2.isChecked() and not self.dlg.checkm2_2.isChecked()):
                ''' indexMODAhab '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME': None,
                    'INPUT': joinEntitatHabitatges,
                    'VALUES_FIELD_NAME': None,
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificació de consum energia primaria no renovable']
                    alg_params['VALUES_FIELD_NAME'] = 'consum'
                if emissions:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio emissions de co2']
                    alg_params['VALUES_FIELD_NAME'] = 'emissions'
                if consumElectric or consumGas:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio']
                    alg_params['VALUES_FIELD_NAME'] = 'consum'
                outputs['Indexmoda'] = processing.run('qgis:statisticsbycategories', alg_params)

                ''' Aggregate Moda '''
                alg_params = {
                    'AGGREGATES': None,
                    'GROUP_BY': 'idEntitat',
                    'INPUT': outputs['Indexmoda']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': '','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                                {'aggregate': 'maximum','delimiter': '','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},
                                                {'aggregate': 'concatenate','delimiter': '','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificació de consum energia primaria no renovable\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},
                                                {'aggregate': 'sum','delimiter': '','input': 'if(\"qualificació de consum energia primaria no renovable\" = if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificació de consum energia primaria no renovable\",\'\'), \"mean\", 0)','length': 0,'name': 'indexMODA','precision': 0,'type': 6}]
                if emissions:
                    alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': '','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                                {'aggregate': 'maximum','delimiter': '','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},
                                                {'aggregate': 'concatenate','delimiter': '','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificacio emissions de co2\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},
                                                {'aggregate': 'sum','delimiter': '','input': 'if(\"qualificacio emissions de co2\" = if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificacio emissions de co2\",\'\'), \"mean\", 0)','length': 0,'name': 'indexMODA','precision': 0,'type': 6}]
                if consumElectric or consumGas:
                    alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': '','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                                {'aggregate': 'maximum','delimiter': '','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},
                                                {'aggregate': 'concatenate','delimiter': '','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificacio\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},
                                                {'aggregate': 'sum','delimiter': '','input': 'if(\"qualificacio\" = if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificacio\",\'\'), \"mean\", 0)','length': 0,'name': 'indexMODA','precision': 0,'type': 6}]
                outputs['AggregateModa'] = processing.run('qgis:aggregate', alg_params)

                ''' Join Final Moda '''
                alg_params = {
                    'DISCARD_NONMATCHING': False,
                    'FIELD': 'idEntitat',
                    'FIELDS_TO_COPY': [''],
                    'FIELD_2': 'idEntitat',
                    'INPUT': entitatLayer,
                    'INPUT_2': outputs['AggregateModa']['OUTPUT'],
                    'METHOD': 1,
                    'PREFIX': '',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['JoinFinalModa'] = processing.run('native:joinattributestable', alg_params)

                ''' Aggregate Final Clean Moda '''
                alg_params = {
                    'AGGREGATES': [{'aggregate': 'first_value', 'delimiter': ',', 'input': '\"idEntitat\"', 'length': 0, 'name': 'idEntitat', 'precision': 0, 'type': 2},
                                   {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"QualifMaxFreq\"', 'length': 0, 'name': 'QualifMaxFreq', 'precision': 0, 'type': 10},
                                   {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"indexMODA\"', 'length': 0, 'name': 'indexMODA', 'precision': 0, 'type': 6}],
                    'GROUP_BY': 'idEntitat',
                    'INPUT': outputs['JoinFinalModa']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                entitatLayerResumModa = processing.run('qgis:aggregate', alg_params)['OUTPUT']
                entitatLayerResumModa.setName('Moda')
            if self.dlg.checkm2.isChecked() or self.dlg.checkm2_2.isChecked():
                '''
                - 1. castConsum / castEmissions fet abans
                - 2. cast m2 fet abans
                - 3. joinEntitatHabitatges fet abans
                '''

                ''' 4. Producte consum / emissions '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'producte',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 0,
                    'FORMULA': None,
                    'INPUT': joinEntitatHabitatges,
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['FORMULA'] = '\"consum\" * \"m2\"'
                if emissions:
                    alg_params['FORMULA'] = '\"emissions\" * \"m2\"'
                if consumElectric or consumGas:
                    alg_params['FORMULA'] = '\"consum\" * \"m2\"'
                outputs['Producte'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' 5. Estadistiquesm2 sembla no ser necessari per la moda '''

                ''' 5. Fare estadistiques per si de cas '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME':    None,
                    'INPUT': joinEntitatHabitatges,
                    'VALUES_FIELD_NAME':        'm2',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificació de consum energia primaria no renovable']
                if emissions:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificacio emissions de co2']
                if consumElectric or consumGas:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat','qualificacio']
                outputs['Estadistiquesm2'] = processing.run('qgis:statisticsbycategories', alg_params)

                ''' 6. sum producte '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME':    None,
                    'INPUT': outputs['Producte']['OUTPUT'],
                    'VALUES_FIELD_NAME':        'producte',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificació de consum energia primaria no renovable']
                if emissions:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio emissions de co2']
                if consumElectric or consumGas:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio']
                outputs['SumProducte'] = processing.run('qgis:statisticsbycategories', alg_params)
                
                ''' 7. sum m2 '''
                alg_params = {
                    'CATEGORIES_FIELD_NAME':    None,
                    'INPUT': outputs['Producte']['OUTPUT'],
                    'VALUES_FIELD_NAME':        'm2',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificació de consum energia primaria no renovable']
                if emissions:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio emissions de co2']
                if consumElectric or consumGas:
                    alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat', 'qualificacio']
                outputs['SumM2'] = processing.run('qgis:statisticsbycategories', alg_params)

                ''' 8. Clean producte '''
                alg_params = {
                    'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
                    'INPUT': outputs['SumProducte']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['cleanproducte'] = processing.run('qgis:deletecolumn', alg_params)

                ''' 9. Clean m2 '''
                alg_params = {
                    'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
                    'INPUT': outputs['SumM2']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['cleanm2'] = processing.run('qgis:deletecolumn', alg_params)

                ''' 10. rename producte '''
                alg_params = {
                    'FIELD': 'sum',
                    'INPUT': outputs['cleanproducte']['OUTPUT'],
                    'NEW_NAME': 'sum_producte',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['renameproducte'] = processing.run('native:renametablefield', alg_params)

                ''' 11. rename m2 '''
                alg_params = {
                    'FIELD': 'sum',
                    'INPUT': outputs['cleanm2']['OUTPUT'],
                    'NEW_NAME': 'sum_m2',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['renamem2'] = processing.run('native:renametablefield', alg_params)

                ''' 12 i 13 calculen seccio_qual, pero aixo no fa falta tenint idEntitat '''
                
                ''' 12. seccio_qual per producte_con/emi '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'id_qual',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 2,
                    'FORMULA': None,
                    'INPUT': outputs['renameproducte']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificació de consum energia primaria no renovable\")'
                if emissions:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio emissions de co2\")'
                if consumElectric or consumGas:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio\")'
                outputs['producte_fin'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' 13. seccio_qual per m2 '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'id_qual',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 2,
                    'FORMULA': None,
                    'INPUT': outputs['renamem2']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificació de consum energia primaria no renovable\")'
                if emissions:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio emissions de co2\")'
                if consumElectric or consumGas:
                    alg_params['FORMULA'] = 'concat(to_string(\"idEntitat\") , \'-\', \"qualificacio\")'
                outputs['m2_fin'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' 14. Join 2 Aggregate '''
                alg_params = {
                    'DISCARD_NONMATCHING': False,
                    'FIELD': 'id_qual',
                    'FIELDS_TO_COPY': ['sum_m2'],
                    'FIELD_2': 'id_qual',
                    'INPUT': outputs['producte_fin']['OUTPUT'],
                    'INPUT_2': outputs['m2_fin']['OUTPUT'],
                    'METHOD': 0,
                    'PREFIX': '',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['Join2Aggregate'] = processing.run('native:joinattributestable', alg_params)

                ''' 15. Moda '''
                alg_params = {
                    'FIELD_LENGTH': 0,
                    'FIELD_NAME': 'moda',
                    'FIELD_PRECISION': 0,
                    'FIELD_TYPE': 0,
                    'FORMULA': '\"sum_producte\" / \"sum_m2\"',
                    'INPUT': outputs['Join2Aggregate']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['Moda'] = processing.run('qgis:fieldcalculator', alg_params)

                ''' 16. Filtrat moda '''
                alg_params = {
                    'AGGREGATES': None,
                    'GROUP_BY': '\"idEntitat\"',
                    'INPUT': outputs['Moda']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                if consum:
                    alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                                {'aggregate': 'maximum','delimiter': ',','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},
                                                {'aggregate': 'concatenate','delimiter': '','input': 'if(\"sum_m2\"=maximum(\"sum_m2\",\"idEntitat\"),\"qualificació de consum energia primaria no renovable\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},
                                                {'aggregate': 'sum','delimiter': ',','input': 'if(\"sum_m2\"=maximum(\"sum_m2\",\"idEntitat\"),\"moda\",0)','length': 0,'name': 'moda','precision': 0,'type': 6}]
                if emissions:
                    alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                                {'aggregate': 'maximum','delimiter': ',','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},
                                                {'aggregate': 'concatenate','delimiter': '','input': 'if(\"sum_m2\"=maximum(\"sum_m2\",\"idEntitat\"),\"qualificacio emissions de co2\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},
                                                {'aggregate': 'sum','delimiter': ',','input': 'if(\"sum_m2\"=maximum(\"sum_m2\",\"idEntitat\"),\"moda\",0)','length': 0,'name': 'moda','precision': 0,'type': 6}]
                if consumElectric or consumGas:
                    alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                                {'aggregate': 'maximum','delimiter': ',','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},
                                                {'aggregate': 'concatenate','delimiter': '','input': 'if(\"sum_m2\"=maximum(\"sum_m2\",\"idEntitat\"),\"qualificacio\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},
                                                {'aggregate': 'sum','delimiter': ',','input': 'if(\"sum_m2\"=maximum(\"sum_m2\",\"idEntitat\"),\"moda\",0)','length': 0,'name': 'moda','precision': 0,'type': 6}]

                outputs['Filtrarmoda'] = processing.run('qgis:aggregate', alg_params)

                """
                Agregat QGIS FUNCIONAL
                Versión de QGIS: 3.16.16-Hannover
                Revisión del código de QGIS: f5778a89df
                Versión de Qt: 5.11.2
                Versión de GDAL: 3.1.4
                Versión de GEOS: 3.8.1-CAPI-1.13.3
                Versión de PROJ: Rel. 6.3.2, May 1st, 2020
                Procesando algoritmo...
                Algoritmo 'Agregar' comenzando…
                Parámetros de entrada:
                { 'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'maximum','delimiter': ',','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},{'aggregate': 'concatenate','delimiter': '','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"),\"qualificacio emissions de co2\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'sum','delimiter': ',','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"),\"moda\",0)','length': 0,'name': 'moda','precision': 0,'type': 6}], 'GROUP_BY' : '\"idEntitat\"', 'INPUT' : 'memory://NoGeometry?field=idEntitat:integer(0,0)&field=qualificacio%20emissions%20de%20co2:string(-1,0)&field=count:integer(0,0)&field=sum_producte:double(0,0)&field=id_qual:string(0,0)&field=sum_m2:double(0,0)&field=moda:double(0,0)&uid={9fdb8c9f-6564-4f0b-bf53-f946db7de232}', 'OUTPUT' : 'TEMPORARY_OUTPUT' }

                Ejecución completada en 0.24 segundos
                Resultados:
                {'OUTPUT': 'Agregado_d0fdfd98_9a38_4f72_8e04_ba18837668c4'}

                Cargando las capas resultantes
                Algoritmo 'Agregar' finalizado
                """


                ''' 17. pre_mitjana no es necessari '''

                ''' 18. Ordenar moda '''
                alg_params = {
                    'ASCENDING': True,
                    'EXPRESSION': '\"idEntitat\"',
                    'INPUT': outputs['Filtrarmoda']['OUTPUT'],
                    'NULLS_FIRST': False,
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['Ordenarmoda'] = processing.run('native:orderbyexpression', alg_params)

                ''' 19. mitjanam2 no es necessari '''

                ''' 20. Join de mitjana i moda no cal, 21. Join de ordenar_moda i aggregate de m2 NO HAURIA DE SER NECESSARI, aggregatem2 nomes servia per trobar m2A, m2B, m2C... '''

                ''' 22. Join Final Moda '''
                alg_params = {
                    'DISCARD_NONMATCHING': False,
                    'FIELD': 'idEntitat',
                    'FIELDS_TO_COPY': [''],
                    'FIELD_2': 'idEntitat',
                    'INPUT': entitatLayer,
                    'INPUT_2': outputs['Ordenarmoda']['OUTPUT'],
                    'METHOD': 1,
                    'PREFIX': '',
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                outputs['JoinFinal'] = processing.run('native:joinattributestable', alg_params)

                ''' 23. Aggregate Final Clean '''
                alg_params = {
                    'AGGREGATES': [{'aggregate': 'first_value', 'delimiter': ',', 'input': '\"idEntitat\"', 'length': 0, 'name': 'idEntitat', 'precision': 0, 'type': 2}, 
                                   {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"QualifMaxFreq\"', 'length': 0, 'name': 'QualifMaxFreq', 'precision': 0, 'type': 10},
                                   {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"moda\"', 'length': 0, 'name': 'indexMODA', 'precision': 0, 'type': 6}],
                    'GROUP_BY': 'idEntitat',
                    'INPUT': outputs['JoinFinal']['OUTPUT'],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                entitatLayerResumModa = processing.run('qgis:aggregate', alg_params)['OUTPUT']
                entitatLayerResumModa.setName('Moda')
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular moda de " + nomEntitat)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular moda de " + nomEntitat)
            self.dlg.setEnabled(True)
            return

    def calculMediana(self):
        global results
        global entitatLayerResumMediana

        outputs = {}

        try:
            alg_params = {
                'EXPRESSION': None,
                'INPUT': joinEntitatHabitatges,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if (self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked()) or (self.dlg.checkNumHabit_2.isChecked() and not self.dlg.checkm2_2.isChecked()):
                if consum:
                    alg_params['EXPRESSION'] = ' "consum" is not null and "consum" !=0'
                if emissions:
                    alg_params['EXPRESSION'] = ' "emissions" is not null and "emissions" !=0'
                if consumElectric or consumGas:
                    alg_params['EXPRESSION'] = ' "consum" is not null and "consum" !=0'
            if self.dlg.checkm2.isChecked() or self.dlg.checkm2_2.isChecked():
                if consum:
                    alg_params['EXPRESSION'] = ' "consum" is not null and "consum" !=0 and "m2" is not null and "m2" !=0'
                if emissions:
                    alg_params['EXPRESSION'] = ' "emissions" is not null and "emissions" !=0 and "m2" is not null and "m2" !=0'
                if consumElectric or consumGas:
                    alg_params['EXPRESSION'] = ' "consum" is not null and "consum" !=0 and "m2" is not null and "m2" !=0'
            outputs['joinEntitatHabitatges_nozero_nonull'] = processing.run('native:extractbyexpression', alg_params)
            alg_params = {
                'CATEGORIES_FIELD_NAME': None,
                'INPUT': outputs['joinEntitatHabitatges_nozero_nonull']['OUTPUT'],
                'VALUES_FIELD_NAME': None,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if consum:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat']
                alg_params['VALUES_FIELD_NAME'] = 'consum'
            if emissions:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat']
                alg_params['VALUES_FIELD_NAME'] = 'emissions'
            if consumElectric or consumGas:
                alg_params['CATEGORIES_FIELD_NAME'] = ['idEntitat']
                alg_params['VALUES_FIELD_NAME'] = 'consum'
            outputs['Indexmediana'] = processing.run('qgis:statisticsbycategories', alg_params)

            alg_params = {
                'AGGREGATES': None,
                'GROUP_BY': 'idEntitat',
                'INPUT': outputs['Indexmediana']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            if consum:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'first_value','delimiter': ',','input': '\"median\"','length': 0,'name': 'indexMEDIANA','precision': 0,'type': 6}]
            if emissions:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'first_value','delimiter': ',','input': '\"median\"','length': 0,'name': 'indexMEDIANA','precision': 0,'type': 6}]
            if consumElectric or consumGas:
                alg_params['AGGREGATES'] = [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},
                                            {'aggregate': 'first_value','delimiter': ',','input': '\"median\"','length': 0,'name': 'indexMEDIANA','precision': 0,'type': 6}]
            outputs['AggregateMediana'] = processing.run('qgis:aggregate', alg_params)

            alg_params = {
                'DISCARD_NONMATCHING': False,
                'FIELD': 'idEntitat',
                'FIELDS_TO_COPY': [''],
                'FIELD_2': 'idEntitat',
                'INPUT': entitatLayer,
                'INPUT_2': outputs['AggregateMediana']['OUTPUT'],
                'METHOD': 1,
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['JoinFinalMediana'] = processing.run('native:joinattributestable', alg_params)

            alg_params = {
                'AGGREGATES': [{'aggregate': 'first_value', 'delimiter': ',', 'input': '\"idEntitat\"', 'length': 0, 'name': 'idEntitat', 'precision': 0, 'type': 2},
                               {'aggregate': 'first_value', 'delimiter': ',', 'input': '\"indexMEDIANA\"', 'length': 0, 'name': 'indexMEDIANA', 'precision': 0, 'type': 6}],
                'GROUP_BY': 'idEntitat',
                'INPUT': outputs['JoinFinalMediana']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            entitatLayerResumMediana = processing.run('qgis:aggregate', alg_params)['OUTPUT']
            entitatLayerResumMediana.setName('Mediana')
            QApplication.processEvents()
        except Exception as ex:
            print ("Error al calcular mediana de " + nomEntitat)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al calcular mediana de " + nomEntitat)
            self.dlg.setEnabled(True)
            return

    def scroll_text(self):
        self.dlg.textEstat.moveCursor(QTextCursor.End)
    
    def updateProgress(self, progress):
        self.dlg.progressBar.setValue(progress)
        QApplication.processEvents()
        
    def barraEstat_noConnectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "No connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.lblEstatConn.setText('No connectat')
        QApplication.processEvents()
        
    def barraEstat_connectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
    def barraEstat_connectant(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectant..."'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
        self.dlg.lblEstatConn.setText('Connectant...')
        QApplication.processEvents()

    def on_click_Sortir(self):
        global connexioFeta
        if connexioFeta:
            self.dropFinalTables()
            cur.close()
            conn.close()
            connexioFeta = False
        self.estatInicial()
        self.dlg.close()

    def on_click_Inici(self):
        global cur
        global conn
        global textBox
        global nomBD1
        global password1
        global host1
        global user1
        global port1
        global schema1
        global uri
        global color
        global minimumValue
        global maximumValue
        global estandar
        global personalitzat
        global any

        global habitatges
        global habitatgesLayer
        global entitat
        global entitatLayer
        global entitatLayerJoined
        global entitatLayerResumNumHabit
        global entitatLayerResumm2
        global entitatLayerResumMitjana
        global entitatLayerResumModa
        global entitatLayerResumMediana
        global fitxer
        global ranges
        global colors
        global symbols

        global parameters

        total_start_time = time.time()

        try:
            root = QgsProject.instance().layerTreeRoot()
        except:
            root = self.iface.layerTreeCanvasBridge().rootGroup()

        if entitat is None or entitatLayer is None or habitatges is None or habitatgesLayer is None or nomEntitat is None:
            self.on_change_comboEntitat()

        # Fer grup de capes amb totes capes resultats que es digui "Consum de ENTITAT" o "Emissions de ENTITAT"
        # Canviar noms perque es diguin nombre d'habitatges segons categoria, metres quadrats segons categoria, mitjana, moda i mediana
        # Canviar noms num i m2 a "Classificació per nombre d'habitatges" i "Classificació per metres quadrats"

        uri = QgsDataSourceUri()

        try:
            uri.setConnection(host1, port1, nomBD1, user1, password1)
            self.detect_database_version()
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a la connexio")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

        if entitat == llistaEntitats[0] or entitat == None:
            print("No s'ha seleccionat cap entitat amb la que treballar")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat cap entitat amb la que treballar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked() and not self.dlg.checkMitjana.isChecked() and not self.dlg.checkModa.isChecked() and not self.dlg.checkMediana.isChecked()) and (not self.dlg.checkNumHabit_2.isChecked() and not self.dlg.checkm2_2.isChecked() and not self.dlg.checkMitjana_2.isChecked() and not self.dlg.checkModa_2.isChecked() and not self.dlg.checkMediana_2.isChecked()):
            print ("No s'ha seleccionat cap càlcul que realitzar")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat cap càlcul que realitzar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (not self.dlg.consumButton.isChecked() and not self.dlg.emissionsButton.isChecked()) and (not self.dlg.consumElectricButton.isChecked() and not self.dlg.consumGasButton.isChecked()):
            print ("No s'ha seleccionat ni consum ni emissions")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat ni consum ni emissions")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        if consum:
            group = root.insertGroup(0, f"Consum de {nomEntitat.upper()} (KWh/m²any)")
        if emissions:
            group = root.insertGroup(0, f"Emissions de {nomEntitat.upper()} (kgCO₂/m²any)")
        if consumElectric:
            group = root.insertGroup(0, f"Consum Elèctric de {nomEntitat.upper()} (KWh/m²any)")
        if consumGas:
            group = root.insertGroup(0, f"Consum Gas de {nomEntitat.upper()} (KWh/m²any)")

        llegenda = QgsVectorLayer("MultiPolygon?crs=epsg:25831", "Llegenda", "memory")
        QgsProject.instance().addMapLayer(llegenda, False)
        diagramLlegenda = QgsPieDiagram()
        diagramLlegendaSettings = QgsDiagramSettings()
        diagramLlegendaSettings.categoryColors = list(colors.values())[2:]
        diagramLlegendaSettings.categoryAttributes = ['m2A', 'm2B', 'm2C', 'm2D', 'm2E', 'm2F', 'm2G']
        diagramLlegendaSettings.scaleByArea = False
        diagramLlegendaSettings.scaleBasedVisibility = True
        diagramLlegendaSettings.size = QSizeF(15, 15)
        diagramLlegendaSettings.minimumScale = minimumValue
        diagramLlegendaSettings.maximumScale = maximumValue
        diagramLlegendaSettings.categoryLabels = ['A (Menys de 34,1)', 
                                                  'B (34,1 - 55,5)', 
                                                  'C (55,5 - 85,4)', 
                                                  'D (85,4 - 111,6)', 
                                                  'E (111,6 - 136,6)', 
                                                  'F (136,6 - 170,7)', 
                                                  'G (Més de 170,7)']
        diagramLlegendaSettings.enabled = True
        llegenda.renderer().symbol().setColor(color)
        diagramLlegendaRenderer = QgsSingleCategoryDiagramRenderer()
        diagramLlegendaRenderer.setDiagram(diagramLlegenda)
        diagramLlegendaRenderer.setDiagramSettings(diagramLlegendaSettings)
        diagramLlegendaRenderer.setAttributeLegend(True)
        llegenda.setDiagramRenderer(diagramLlegendaRenderer)
        llegenda.triggerRepaint()
        propertyx = QgsProperty()
        propertyx.setExpressionString("x(centroid($geometry))")
        propertyx.setActive(True)
        propertyy = QgsProperty()
        propertyy.setExpressionString("y(centroid($geometry))")
        propertyy.setActive(True)
        propertyVisibility = QgsProperty()
        propertyVisibility.setExpressionString("scale() > " + str(minimumValue) + " AND scale() < " + str(maximumValue))
        propertyVisibility.setActive(True)
        propertyCollection = QgsPropertyCollection("Diagram Properties")
        propertyCollection.setProperty(3, propertyx)
        propertyCollection.setProperty(4, propertyy)
        propertyCollection.setProperty(9, propertyVisibility)
        diagramLlegendaLayerSettings = QgsDiagramLayerSettings()
        diagramLlegendaLayerSettings.setDataDefinedProperties(propertyCollection)
        llegenda.setDiagramLayerSettings(diagramLlegendaLayerSettings)
        single_symbol_renderer = llegenda.renderer().clone()
        symbol = single_symbol_renderer.symbol()
        symbol_layer = QgsSimpleLineSymbolLayer()
        symbol_layer.setWidth(0)
        llegenda.setRenderer(single_symbol_renderer)
        llegenda.triggerRepaint()
        node = QgsLayerTreeLayer(llegenda)
        node.setExpanded(True)
        group.insertChildNode(0, node)
        llegenda.triggerRepaint()
        QApplication.processEvents()
        
        ''' Aquesta comprovació serveix per a assegurar-se que s'utilitza la taula correcta segons consum d'energia primaria no renovable i emissions de co2,
            consum elèctric o consum de gas, que són tres taules diferents encara que originalment sempre s'utilitzés la primera (cert_efi_energ_edif_mataro_geom)
            que és la que es s'ha deixat escrita a la definició de la variable global habitatges '''
        if self.dlg.tabCalculs.currentIndex() == 0:
            if habitatges != 'cert_efi_energ_edif_mataro_geom':
                self.on_change_comboEntitat()
        if self.dlg.tabCalculs.currentIndex() == 1:
            if self.dlg.consumElectricButton.isChecked():
                if habitatges != "consums_mataro_llum":
                    self.on_change_comboEntitat()
            if self.dlg.consumGasButton.isChecked():
                if habitatges != "consums_mataro_gas":
                    self.on_change_comboEntitat()

        self.updateProgress(5)

        self.dlg.setEnabled(False)
        self.dlg.groupBD.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.groupChecks_2.setEnabled(False)
        self.dlg.groupEntitats.setEnabled(False)
        textBox = f"INICIANT EL PROCÉS...\n"
        textBox += f"----------------------------\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()

        QApplication.processEvents()

        any = self.dlg.comboAny.currentText()

        if self.dlg.tabCalculs.currentIndex() == 1:
            self.calculQualificacio()
        self.calculIdEntitat()
        self.castConsumEmissions()
        if self.dlg.consumElectricButton.isChecked():
            self.desagregarConsumsElectrics()
        if self.dlg.checkm2.isChecked() or self.dlg.checkm2_2.isChecked():
            self.castm2()
        self.joinEntitatHabitatges()

        textBox += f"Realitzats càlculs previs de {nomEntitat}.\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()
        self.updateProgress(20)
        QApplication.processEvents()

        if estandar:
            color = QColor("#707070")
            minimumValue = self.dlg.minScale.value()
            maximumValue = self.dlg.maxScale.value()
        if personalitzat:
            minimumValue = self.dlg.minScale.value()
            maximumValue = self.dlg.maxScale.value()   

        '''
        if consum:
            ranges = ranges_consum
        if emissions:
            ranges = ranges_emissions        
        '''
        
        # Diagrames NumHabit
        if self.dlg.checkNumHabit.isChecked() or self.dlg.checkNumHabit_2.isChecked():
            self.calculNumHabit()

            diagramNumHabit = QgsPieDiagram()
            diagramNumHabitSettings = QgsDiagramSettings()
            diagramNumHabitSettings.categoryColors = list(colors.values())[2:]
            diagramNumHabitSettings.categoryAttributes = ['NumA', 'NumB', 'NumC', 'NumD', 'NumE', 'NumF', 'NumG']
            diagramNumHabitSettings.scaleByArea = False
            diagramNumHabitSettings.scaleBasedVisibility = True
            diagramNumHabitSettings.size = QSizeF(15, 15)
            diagramNumHabitSettings.minimumScale = minimumValue
            diagramNumHabitSettings.maximumScale = maximumValue
            diagramNumHabitSettings.categoryLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
            diagramNumHabitSettings.enabled = True

            entitatLayerResumNumHabit.renderer().symbol().setColor(color)

            diagramNumHabitRenderer = QgsSingleCategoryDiagramRenderer()
            diagramNumHabitRenderer.setDiagram(diagramNumHabit)
            diagramNumHabitRenderer.setDiagramSettings(diagramNumHabitSettings)
            diagramNumHabitRenderer.setAttributeLegend(False)

            entitatLayerResumNumHabit.setDiagramRenderer(diagramNumHabitRenderer)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyVisibility = QgsProperty()
            propertyVisibility.setExpressionString("""CASE WHEN "TotalEE" = 0 THEN False WHEN "TotalEE" IS NULL THEN False ELSE True END """)
            propertyVisibility.setActive(True)

            propertyCollection = QgsPropertyCollection('diagram_properties')
            propertyCollection.setProperty(3, propertyx)
            propertyCollection.setProperty(4, propertyy)
            propertyCollection.setProperty(9, propertyVisibility)

            diagramNumHabitLayerSettings = QgsDiagramLayerSettings()
            diagramNumHabitLayerSettings.setDataDefinedProperties(propertyCollection)

            entitatLayerResumNumHabit.setDiagramLayerSettings(diagramNumHabitLayerSettings)

            single_symbol_renderer = entitatLayerResumNumHabit.renderer().clone()
            symbol = single_symbol_renderer.symbol()
            symbol_layer = QgsSimpleLineSymbolLayer()
            symbol_layer.setWidth(0)
            entitatLayerResumNumHabit.setRenderer(single_symbol_renderer)

            entitatLayerResumNumHabit.triggerRepaint()
            node = QgsLayerTreeLayer(entitatLayerResumNumHabit)
            node.setExpanded(False)
            group.insertChildNode(1, node)
            QApplication.processEvents()

            textBox += f"Realitzat càlcul de NumHabit de {nomEntitat}.\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.updateProgress(35)
            QApplication.processEvents()

        if self.dlg.checkm2.isChecked() or self.dlg.checkm2_2.isChecked():
            self.calculm2()

            diagramm2 = QgsPieDiagram()
            diagramm2Settings = QgsDiagramSettings()
            diagramm2Settings.categoryColors = list(colors.values())[2:]
            diagramm2Settings.categoryAttributes = ['m2A', 'm2B', 'm2C', 'm2D', 'm2E', 'm2F', 'm2G']
            diagramm2Settings.scaleByArea = False
            diagramm2Settings.scaleBasedVisibility = True
            diagramm2Settings.size = QSizeF(15, 15)
            diagramm2Settings.minimumScale = minimumValue
            diagramm2Settings.maximumScale = maximumValue
            diagramm2Settings.categoryLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
            diagramm2Settings.enabled = True

            entitatLayerResumm2.renderer().symbol().setColor(color)

            diagramm2Renderer = QgsSingleCategoryDiagramRenderer()
            diagramm2Renderer.setDiagram(diagramm2)
            diagramm2Renderer.setDiagramSettings(diagramm2Settings)
            diagramm2Renderer.setAttributeLegend(False)

            entitatLayerResumm2.setDiagramRenderer(diagramm2Renderer)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyVisibility = QgsProperty()
            propertyVisibility.setExpressionString("""CASE WHEN "Totalm2" = 0 THEN False WHEN "Totalm2" IS NULL THEN False ELSE True END """)
            propertyVisibility.setActive(True)

            propertyCollection = QgsPropertyCollection('diagram_properties')
            propertyCollection.setProperty(3, propertyx)
            propertyCollection.setProperty(4, propertyy)
            propertyCollection.setProperty(9, propertyVisibility)

            diagramm2LayerSettings = QgsDiagramLayerSettings()
            diagramm2LayerSettings.setDataDefinedProperties(propertyCollection)

            entitatLayerResumm2.setDiagramLayerSettings(diagramm2LayerSettings)

            single_symbol_renderer = entitatLayerResumm2.renderer().clone()
            symbol = single_symbol_renderer.symbol()
            symbol_layer = QgsSimpleLineSymbolLayer()
            symbol_layer.setWidth(0)
            entitatLayerResumm2.setRenderer(single_symbol_renderer)

            entitatLayerResumm2.triggerRepaint()
            node = QgsLayerTreeLayer(entitatLayerResumm2)
            node.setExpanded(False)
            group.insertChildNode(2, node)
            QApplication.processEvents()
            
            textBox += f"Realitzat càlcul de m2 de {nomEntitat}.\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.updateProgress(50)
            QApplication.processEvents()

        # Labels Mitjana

        if self.dlg.checkMitjana.isChecked() or self.dlg.checkMitjana_2.isChecked():
            self.calculMitjana()
            
            labelMitjana = QgsPalLayerSettings()
            labelMitjana.enabled = True

            labelMitjana.fieldName = """
            CASE
                WHEN "indexMITJANA" IS NOT NULL AND "indexMITJANA" > 0 THEN '<div><b><font color="black">' || format_number("indexMITJANA", 1) || '</font></b></div>'
                ELSE ''
            END
            """
            labelMitjana.isExpression = True
            labelMitjana.placement = QgsPalLayerSettings.AroundPoint

            text_format = QgsTextFormat()
            text_format.setAllowHtmlFormatting(True)

            background_format = QgsTextBackgroundSettings()
            background_format = QgsTextBackgroundSettings()
            background_format.setEnabled(True)
            background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
            background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
            background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setSize(QSizeF(3, 3))
            background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setRadii(QSizeF(3, 3))
            background_format.setFillColor(QColor("#ffffff"))
            background_format.setStrokeColor(QColor("#808080"))
            background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setStrokeWidth(1)

            text_format.setBackground(background_format)
            
            symbology = QgsGraduatedSymbolRenderer("indexMITJANA", ranges.values())
            '''
            symbolUnits = QgsFillSymbol()
            if consum:
                symbolUnits.setColor(colors["colorConsum"])
            if emissions:
                symbolUnits.setColor(colors["colorEmissions"])
            '''
            symbolA = QgsFillSymbol()
            symbolA.setColor(colors["colorA"])
            symbolB = QgsFillSymbol()
            symbolB.setColor(colors["colorB"])
            symbolC = QgsFillSymbol()
            symbolC.setColor(colors["colorC"])
            symbolD = QgsFillSymbol()
            symbolD.setColor(colors["colorD"])
            symbolE = QgsFillSymbol()
            symbolE.setColor(colors["colorE"])
            symbolF = QgsFillSymbol()
            symbolF.setColor(colors["colorF"])
            symbolG = QgsFillSymbol()
            symbolG.setColor(colors["colorG"])

            #symbology.updateRangeSymbol(0, symbolUnits)
            symbology.updateRangeSymbol(0, symbolA)
            symbology.updateRangeSymbol(1, symbolB)
            symbology.updateRangeSymbol(2, symbolC)
            symbology.updateRangeSymbol(3, symbolD)
            symbology.updateRangeSymbol(4, symbolE)
            symbology.updateRangeSymbol(5, symbolF)
            symbology.updateRangeSymbol(6, symbolG)

            labelMitjana.setFormat(text_format)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(9, propertyx)
            propertyCollection.setProperty(10, propertyy)

            labelMitjana.setDataDefinedProperties(propertyCollection)

            labelMitjana.minimumScale = minimumValue
            labelMitjana.maximumScale = maximumValue
            
            labelMitjana.scaleVisibility = True

            entitatLayerResumMitjana.setLabeling(QgsVectorLayerSimpleLabeling(labelMitjana))
            entitatLayerResumMitjana.setLabelsEnabled(True)
            entitatLayerResumMitjana.setRenderer(symbology)
            entitatLayerResumMitjana.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumMitjana, False)
            node = QgsLayerTreeLayer(entitatLayerResumMitjana)
            node.setExpanded(False)
            group.insertChildNode(3, node)
            
            textBox += f"Realitzat càlcul de mitjana de {nomEntitat}.\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.updateProgress(65)
            QApplication.processEvents()
        
        # Labels Moda

        if self.dlg.checkModa.isChecked() or self.dlg.checkModa_2.isChecked():
            self.calculModa()

            labelModa = QgsPalLayerSettings()
            labelModa.enabled = True

            labelModa.fieldName = """
            CASE
                WHEN "indexMODA" IS NOT NULL AND "indexMODA" > 0 THEN '<div><b><font color="black">' || format_number("indexMODA", 1) || '</font></b></div>'
                ELSE ''
            END
            """

            labelModa.isExpression = True
            labelModa.placement = QgsPalLayerSettings.AroundPoint

            text_format = QgsTextFormat()
            text_format.setAllowHtmlFormatting(True)

            background_format = QgsTextBackgroundSettings()
            background_format.setEnabled(True)
            background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
            background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
            background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setSize(QSizeF(3, 3))
            background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setRadii(QSizeF(3, 3))
            background_format.setFillColor(QColor("#ffffff"))
            background_format.setStrokeColor(QColor("#808080"))
            background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setStrokeWidth(1)

            text_format.setBackground(background_format)

            symbology = QgsCategorizedSymbolRenderer()
            symbology.setClassAttribute("QualifMaxFreq")
            '''
            if consum:
                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
                symbology.addCategory(QgsRendererCategory("xxx", symbol, "Consum (KWh/m²any)"))
            if emissions:
                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
                symbology.addCategory(QgsRendererCategory("xxx", symbol,"Emissions (kgCO₂/m²any)"))
            '''
            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorA"]))
            symbology.addCategory(QgsRendererCategory("A", symbol, "A"))

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorB"]))
            symbology.addCategory(QgsRendererCategory("B", symbol, "B"))

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorC"]))
            symbology.addCategory(QgsRendererCategory("C", symbol, "C"))

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorD"]))
            symbology.addCategory(QgsRendererCategory("D", symbol, "D"))

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorE"]))
            symbology.addCategory(QgsRendererCategory("E", symbol, "E"))

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorF"]))
            symbology.addCategory(QgsRendererCategory("F", symbol, "F"))

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorG"]))
            symbology.addCategory(QgsRendererCategory("G", symbol, "G"))

            labelModa.setFormat(text_format)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(9, propertyx)
            propertyCollection.setProperty(10, propertyy)

            labelModa.setDataDefinedProperties(propertyCollection)

            labelModa.minimumScale = minimumValue
            labelModa.maximumScale = maximumValue

            labelModa.scaleVisibility = True

            entitatLayerResumModa.setLabeling(QgsVectorLayerSimpleLabeling(labelModa))
            entitatLayerResumModa.setLabelsEnabled(True)
            entitatLayerResumModa.setRenderer(symbology)
            entitatLayerResumModa.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumModa, False)
            node = QgsLayerTreeLayer(entitatLayerResumModa)
            node.setExpanded(False)
            group.insertChildNode(4, node)
            
            textBox += f"Realitzat càlcul de moda de {nomEntitat}.\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.updateProgress(80)
            QApplication.processEvents()

        # Labels Mediana

        if self.dlg.checkMediana.isChecked() or self.dlg.checkMediana_2.isChecked():
            self.calculMediana()

            labelMediana = QgsPalLayerSettings()
            labelMediana.enabled = True
            labelMediana.fieldName = """
            CASE
                WHEN "indexMEDIANA" IS NOT NULL AND "indexMEDIANA" > 0 THEN '<div><b><font color="black">' || format_number("indexMEDIANA", 1) || '</font></b></div>'
                ELSE ''
            END
            """

            labelMediana.isExpression = True
            labelMediana.placement = QgsPalLayerSettings.AroundPoint

            text_format = QgsTextFormat()
            text_format.setAllowHtmlFormatting(True)

            background_format = QgsTextBackgroundSettings()
            background_format.setEnabled(True)
            background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
            background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
            background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setSize(QSizeF(3, 3))
            background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setRadii(QSizeF(3, 3))
            background_format.setFillColor(QColor("#ffffff"))
            background_format.setStrokeColor(QColor("#808080"))
            background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setStrokeWidth(1)

            text_format.setBackground(background_format)

            symbology = QgsGraduatedSymbolRenderer("indexMEDIANA", ranges.values())
            '''
            symbolUnits = QgsFillSymbol()
            if consum:
                symbolUnits.setColor(colors["colorConsum"])
            if emissions:
                symbolUnits.setColor(colors["colorEmissions"])
            '''
            symbolA = QgsFillSymbol()
            symbolA.setColor(colors["colorA"])
            symbolB = QgsFillSymbol()
            symbolB.setColor(colors["colorB"])
            symbolC = QgsFillSymbol()
            symbolC.setColor(colors["colorC"])
            symbolD = QgsFillSymbol()
            symbolD.setColor(colors["colorD"])
            symbolE = QgsFillSymbol()
            symbolE.setColor(colors["colorE"])
            symbolF = QgsFillSymbol()
            symbolF.setColor(colors["colorF"])
            symbolG = QgsFillSymbol()
            symbolG.setColor(colors["colorG"])

            #symbology.updateRangeSymbol(0, symbolUnits)
            symbology.updateRangeSymbol(0, symbolA)
            symbology.updateRangeSymbol(1, symbolB)
            symbology.updateRangeSymbol(2, symbolC)
            symbology.updateRangeSymbol(3, symbolD)
            symbology.updateRangeSymbol(4, symbolE)
            symbology.updateRangeSymbol(5, symbolF)
            symbology.updateRangeSymbol(6, symbolG)

            labelMediana.setFormat(text_format)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(9, propertyx)
            propertyCollection.setProperty(10, propertyy)

            labelMediana.setDataDefinedProperties(propertyCollection)

            labelMediana.minimumScale = minimumValue
            labelMediana.maximumScale = maximumValue
            
            labelMediana.scaleVisibility = True

            entitatLayerResumMediana.setLabeling(QgsVectorLayerSimpleLabeling(labelMediana))
            entitatLayerResumMediana.setLabelsEnabled(True)
            entitatLayerResumMediana.setRenderer(symbology)
            entitatLayerResumMediana.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumMediana, False)
            node = QgsLayerTreeLayer(entitatLayerResumMediana)
            node.setExpanded(False)
            group.insertChildNode(5, node)
            
            textBox += f"Realitzat càlcul de mediana de {nomEntitat}.\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.updateProgress(95)
            QApplication.processEvents()

        total_finish_time = time.time()
        tempsFinal = round(total_finish_time - total_start_time)
        textBox += f"\nPROCÉS FINALITZAT en {tempsFinal} segons.\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()
        self.dlg.setEnabled(True)
        self.dlg.groupBD.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.groupChecks_2.setEnabled(True)
        self.dlg.groupEntitats.setEnabled(True)
        self.updateProgress(100)
        self.estatFinalitzat()
        print(f"Temps total de procés: {tempsFinal} segons")
        QMessageBox.information(None, "Procés finalitzat", f"El procés per a l'entitat {nomEntitat} ha finalitzat.", QMessageBox.Ok)
        QApplication.processEvents()

    def dropFinalTables(self):
        global cur
        global conn
        
        try:
            cur.execute(f"DROP TABLE IF EXISTS parcel_temp_{fitxer};")
            conn.commit()
            cur.execute(f"DROP TABLE IF EXISTS zone_{fitxer};")
            conn.commit()
        except Exception as ex:
            print ("Error al eliminar la taula parcel_temp")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al eliminar la taula parcel_temp")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def populateComboBox(self, combo, list, predef, sort):
        """Procediment per omplir el combo especificat amb la llista subministrada"""
        combo.blockSignals(True)
        combo.clear()
        model = QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CCU'),
                action)
            #self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)

    def run(self):
        global fitxer
        global llistaEntitats
        """Run method that performs all the real work"""
        # show the dialog
        self.estatInicial()
        fitxer = "ccu_temp"+datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        llistaEntitats = [
            None, # Entitat per defecte, ha de donar error
            f"parcel_temp_{fitxer}",
            f"zone_{fitxer}",
            "seccions",
            "barris",
            "districtes_postals",
            "districtes"
        ]
        self.dlg.show()
        conn=self.getConnections()
        # Run the dialog event loop
        self.populateComboBox(self.dlg.comboBD, conn, 'Selecciona connexió', True)
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
